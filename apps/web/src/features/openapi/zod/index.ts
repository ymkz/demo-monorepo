/**
 * Generated by orval v7.4.1 üç∫
 * Do not edit manually.
 * API‰ªïÊßòÊõ∏
 * OpenAPI spec version: 0.0.1
 */
import { z as zod } from 'zod'

export const findBooksQueryPriceFromMin = 0
export const findBooksQueryPriceToMin = 0
export const findBooksQueryOffsetMin = 0
export const findBooksQueryLimitMax = 100

export const findBooksQueryParams = zod.object({
  isbn: zod.string().optional(),
  title: zod.string().optional(),
  priceFrom: zod.number().min(findBooksQueryPriceFromMin).optional(),
  priceTo: zod.number().min(findBooksQueryPriceToMin).optional(),
  status: zod.array(zod.enum(['UNPUBLISHED', 'PUBLISHED', 'OUT_OF_PRINT'])).optional(),
  publishedAtStart: zod.string().datetime().optional(),
  publishedAtEnd: zod.string().datetime().optional(),
  order: zod.enum(['+price', '-price', '+published_at', '-published_at']).optional(),
  offset: zod.number().min(findBooksQueryOffsetMin).optional(),
  limit: zod.number().min(1).max(findBooksQueryLimitMax).optional(),
})

export const findBooksResponse = zod.object({
  pagination: zod
    .object({
      offset: zod.number().optional(),
      limit: zod.number().optional(),
      total: zod.number().optional(),
    })
    .optional(),
  hits: zod
    .array(
      zod.object({
        id: zod.number().optional(),
        isbn: zod.string().optional(),
        title: zod.string().optional(),
        price: zod.number().optional(),
        status: zod.enum(['UNPUBLISHED', 'PUBLISHED', 'OUT_OF_PRINT']).optional(),
        publishedAt: zod.string().datetime().optional(),
        authorId: zod.number().optional(),
        authorName: zod.string().optional(),
        publisherId: zod.number().optional(),
        publisherName: zod.string().optional(),
      }),
    )
    .optional(),
})

export const createBookBodyPriceMin = 0

export const createBookBody = zod.object({
  isbn: zod.string(),
  title: zod.string(),
  price: zod.number().min(createBookBodyPriceMin).optional(),
  status: zod.enum(['UNPUBLISHED', 'PUBLISHED', 'OUT_OF_PRINT']),
  publishedAt: zod.string().datetime().optional(),
})

export const findBookByIdParams = zod.object({
  id: zod.number(),
})

export const findBookByIdResponse = zod.object({
  id: zod.number().optional(),
  isbn: zod.string().optional(),
  title: zod.string().optional(),
  price: zod.number().optional(),
  status: zod.enum(['UNPUBLISHED', 'PUBLISHED', 'OUT_OF_PRINT']).optional(),
  publishedAt: zod.string().datetime().optional(),
  authorId: zod.number().optional(),
  authorName: zod.string().optional(),
  publisherId: zod.number().optional(),
  publisherName: zod.string().optional(),
})

export const deleteBookParams = zod.object({
  id: zod.number(),
})

export const updateBookParams = zod.object({
  id: zod.number(),
})

export const updateBookBodyPriceMin = 0

export const updateBookBody = zod.object({
  isbn: zod.string().optional(),
  title: zod.string().optional(),
  price: zod.number().min(updateBookBodyPriceMin).optional(),
  status: zod.enum(['UNPUBLISHED', 'PUBLISHED', 'OUT_OF_PRINT']).optional(),
  publishedAt: zod.string().datetime().optional(),
})
