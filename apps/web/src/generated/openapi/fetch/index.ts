/**
 * Generated by orval v7.4.1 🍺
 * Do not edit manually.
 * API仕様書
 * OpenAPI spec version: 1.0.0
 */
import type {
  CreateBookBody,
  DownloadBooksParams,
  FindBookByIdResponse,
  FindBooksResponse,
  ProblemDetail,
  SearchBooksParams,
  UpdateBookBody,
} from '../schema'

export type searchBooksResponse = {
  data: FindBooksResponse | ProblemDetail
  status: number
  headers: Headers
}

export const getSearchBooksUrl = (params?: SearchBooksParams) => {
  const normalizedParams = new URLSearchParams()

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  })

  return normalizedParams.size
    ? `${process.env.API_URL}/books?${normalizedParams.toString()}`
    : `${process.env.API_URL}/books`
}

export const searchBooks = async (params?: SearchBooksParams, options?: RequestInit): Promise<searchBooksResponse> => {
  const res = await fetch(getSearchBooksUrl(params), {
    ...options,
    method: 'GET',
  })

  const data: FindBooksResponse = [204, 205, 304].includes(res.status) || !res.body ? {} : await res.json()

  return { status: res.status, data, headers: res.headers }
}

export type createBookResponse = {
  data: void | ProblemDetail
  status: number
  headers: Headers
}

export const getCreateBookUrl = () => {
  return `${process.env.API_URL}/books`
}

export const createBook = async (
  createBookBody: CreateBookBody,
  options?: RequestInit,
): Promise<createBookResponse> => {
  const res = await fetch(getCreateBookUrl(), {
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(createBookBody),
  })

  const data: void = [204, 205, 304].includes(res.status) || !res.body ? {} : await res.json()

  return { status: res.status, data, headers: res.headers }
}

export type findBookByIdResponse = {
  data: FindBookByIdResponse | ProblemDetail
  status: number
  headers: Headers
}

export const getFindBookByIdUrl = (id: number) => {
  return `${process.env.API_URL}/books/${id}`
}

export const findBookById = async (id: number, options?: RequestInit): Promise<findBookByIdResponse> => {
  const res = await fetch(getFindBookByIdUrl(id), {
    ...options,
    method: 'GET',
  })

  const data: FindBookByIdResponse = [204, 205, 304].includes(res.status) || !res.body ? {} : await res.json()

  return { status: res.status, data, headers: res.headers }
}

export type deleteBookResponse = {
  data: void | ProblemDetail
  status: number
  headers: Headers
}

export const getDeleteBookUrl = (id: number) => {
  return `${process.env.API_URL}/books/${id}`
}

export const deleteBook = async (id: number, options?: RequestInit): Promise<deleteBookResponse> => {
  const res = await fetch(getDeleteBookUrl(id), {
    ...options,
    method: 'DELETE',
  })

  const data: void = [204, 205, 304].includes(res.status) || !res.body ? {} : await res.json()

  return { status: res.status, data, headers: res.headers }
}

export type updateBookResponse = {
  data: void | ProblemDetail
  status: number
  headers: Headers
}

export const getUpdateBookUrl = (id: number) => {
  return `${process.env.API_URL}/books/${id}`
}

export const updateBook = async (
  id: number,
  updateBookBody: UpdateBookBody,
  options?: RequestInit,
): Promise<updateBookResponse> => {
  const res = await fetch(getUpdateBookUrl(id), {
    ...options,
    method: 'PATCH',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(updateBookBody),
  })

  const data: void = [204, 205, 304].includes(res.status) || !res.body ? {} : await res.json()

  return { status: res.status, data, headers: res.headers }
}

export type downloadBooksResponse = {
  data: string | ProblemDetail
  status: number
  headers: Headers
}

export const getDownloadBooksUrl = (params?: DownloadBooksParams) => {
  const normalizedParams = new URLSearchParams()

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  })

  return normalizedParams.size
    ? `${process.env.API_URL}/books/download?${normalizedParams.toString()}`
    : `${process.env.API_URL}/books/download`
}

export const downloadBooks = async (
  params?: DownloadBooksParams,
  options?: RequestInit,
): Promise<downloadBooksResponse> => {
  const res = await fetch(getDownloadBooksUrl(params), {
    ...options,
    method: 'GET',
  })

  const data: string = [204, 205, 304].includes(res.status) || !res.body ? {} : await res.json()

  return { status: res.status, data, headers: res.headers }
}
