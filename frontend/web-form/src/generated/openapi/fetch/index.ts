/**
 * Generated by orval v7.11.2 🍺
 * Do not edit manually.
 * API仕様書
 * OpenAPI spec version: 1.0.0
 */
import type {
	CreateBookBody,
	DownloadBooksParams,
	FindBookByIdResponse,
	ProblemDetail,
	SearchBooksParams,
	SearchBooksResponse,
	UpdateBookBody,
} from "../schema";

export type searchBooksResponse200 = {
	data: SearchBooksResponse;
	status: 200;
};

export type searchBooksResponse400 = {
	data: ProblemDetail;
	status: 400;
};

export type searchBooksResponse500 = {
	data: ProblemDetail;
	status: 500;
};

export type searchBooksResponseComposite = searchBooksResponse200 | searchBooksResponse400 | searchBooksResponse500;

export type searchBooksResponse = searchBooksResponseComposite & {
	headers: Headers;
};

export const getSearchBooksUrl = (params: SearchBooksParams) => {
	const normalizedParams = new URLSearchParams();

	Object.entries(params || {}).forEach(([key, value]) => {
		const explodeParameters = ["status"];

		if (Array.isArray(value) && explodeParameters.includes(key)) {
			value.forEach((v) => normalizedParams.append(key, v === null ? "null" : v.toString()));
			return;
		}

		if (value !== undefined) {
			normalizedParams.append(key, value === null ? "null" : value.toString());
		}
	});

	const stringifiedParams = normalizedParams.toString();

	return stringifiedParams.length > 0
		? `${process.env.API_URL}/books?${stringifiedParams}`
		: `${process.env.API_URL}/books`;
};

export const searchBooks = async (params: SearchBooksParams, options?: RequestInit): Promise<searchBooksResponse> => {
	const res = await fetch(getSearchBooksUrl(params), {
		...options,
		method: "GET",
	});

	const body = [204, 205, 304].includes(res.status) ? null : await res.text();
	const data: searchBooksResponse["data"] = body ? JSON.parse(body) : {};

	return { data, status: res.status, headers: res.headers } as searchBooksResponse;
};

export type createBookResponse201 = {
	data: null;
	status: 201;
};

export type createBookResponse400 = {
	data: ProblemDetail;
	status: 400;
};

export type createBookResponse500 = {
	data: ProblemDetail;
	status: 500;
};

export type createBookResponseComposite = createBookResponse201 | createBookResponse400 | createBookResponse500;

export type createBookResponse = createBookResponseComposite & {
	headers: Headers;
};

export const getCreateBookUrl = () => {
	return `${process.env.API_URL}/books`;
};

export const createBook = async (
	createBookBody: CreateBookBody,
	options?: RequestInit,
): Promise<createBookResponse> => {
	const res = await fetch(getCreateBookUrl(), {
		...options,
		method: "POST",
		headers: { "Content-Type": "application/json", ...options?.headers },
		body: JSON.stringify(createBookBody),
	});

	const body = [204, 205, 304].includes(res.status) ? null : await res.text();
	const data: createBookResponse["data"] = body ? JSON.parse(body) : {};

	return { data, status: res.status, headers: res.headers } as createBookResponse;
};

export type findBookByIdResponse200 = {
	data: FindBookByIdResponse;
	status: 200;
};

export type findBookByIdResponse400 = {
	data: ProblemDetail;
	status: 400;
};

export type findBookByIdResponse404 = {
	data: ProblemDetail;
	status: 404;
};

export type findBookByIdResponse500 = {
	data: ProblemDetail;
	status: 500;
};

export type findBookByIdResponseComposite =
	| findBookByIdResponse200
	| findBookByIdResponse400
	| findBookByIdResponse404
	| findBookByIdResponse500;

export type findBookByIdResponse = findBookByIdResponseComposite & {
	headers: Headers;
};

export const getFindBookByIdUrl = (id: number) => {
	return `${process.env.API_URL}/books/${id}`;
};

export const findBookById = async (id: number, options?: RequestInit): Promise<findBookByIdResponse> => {
	const res = await fetch(getFindBookByIdUrl(id), {
		...options,
		method: "GET",
	});

	const body = [204, 205, 304].includes(res.status) ? null : await res.text();
	const data: findBookByIdResponse["data"] = body ? JSON.parse(body) : {};

	return { data, status: res.status, headers: res.headers } as findBookByIdResponse;
};

export type deleteBookResponse204 = {
	data: null;
	status: 204;
};

export type deleteBookResponse400 = {
	data: ProblemDetail;
	status: 400;
};

export type deleteBookResponse404 = {
	data: ProblemDetail;
	status: 404;
};

export type deleteBookResponse500 = {
	data: ProblemDetail;
	status: 500;
};

export type deleteBookResponseComposite =
	| deleteBookResponse204
	| deleteBookResponse400
	| deleteBookResponse404
	| deleteBookResponse500;

export type deleteBookResponse = deleteBookResponseComposite & {
	headers: Headers;
};

export const getDeleteBookUrl = (id: number) => {
	return `${process.env.API_URL}/books/${id}`;
};

export const deleteBook = async (id: number, options?: RequestInit): Promise<deleteBookResponse> => {
	const res = await fetch(getDeleteBookUrl(id), {
		...options,
		method: "DELETE",
	});

	const body = [204, 205, 304].includes(res.status) ? null : await res.text();
	const data: deleteBookResponse["data"] = body ? JSON.parse(body) : {};

	return { data, status: res.status, headers: res.headers } as deleteBookResponse;
};

export type updateBookResponse200 = {
	data: null;
	status: 200;
};

export type updateBookResponse400 = {
	data: ProblemDetail;
	status: 400;
};

export type updateBookResponse404 = {
	data: ProblemDetail;
	status: 404;
};

export type updateBookResponse500 = {
	data: ProblemDetail;
	status: 500;
};

export type updateBookResponseComposite =
	| updateBookResponse200
	| updateBookResponse400
	| updateBookResponse404
	| updateBookResponse500;

export type updateBookResponse = updateBookResponseComposite & {
	headers: Headers;
};

export const getUpdateBookUrl = (id: number) => {
	return `${process.env.API_URL}/books/${id}`;
};

export const updateBook = async (
	id: number,
	updateBookBody: UpdateBookBody,
	options?: RequestInit,
): Promise<updateBookResponse> => {
	const res = await fetch(getUpdateBookUrl(id), {
		...options,
		method: "PATCH",
		headers: { "Content-Type": "application/json", ...options?.headers },
		body: JSON.stringify(updateBookBody),
	});

	const body = [204, 205, 304].includes(res.status) ? null : await res.text();
	const data: updateBookResponse["data"] = body ? JSON.parse(body) : {};

	return { data, status: res.status, headers: res.headers } as updateBookResponse;
};

export type downloadBooksResponse200 = {
	data: string;
	status: 200;
};

export type downloadBooksResponse400 = {
	data: ProblemDetail;
	status: 400;
};

export type downloadBooksResponse500 = {
	data: ProblemDetail;
	status: 500;
};

export type downloadBooksResponseComposite =
	| downloadBooksResponse200
	| downloadBooksResponse400
	| downloadBooksResponse500;

export type downloadBooksResponse = downloadBooksResponseComposite & {
	headers: Headers;
};

export const getDownloadBooksUrl = (params?: DownloadBooksParams) => {
	const normalizedParams = new URLSearchParams();

	Object.entries(params || {}).forEach(([key, value]) => {
		const explodeParameters = ["status"];

		if (Array.isArray(value) && explodeParameters.includes(key)) {
			value.forEach((v) => normalizedParams.append(key, v === null ? "null" : v.toString()));
			return;
		}

		if (value !== undefined) {
			normalizedParams.append(key, value === null ? "null" : value.toString());
		}
	});

	const stringifiedParams = normalizedParams.toString();

	return stringifiedParams.length > 0
		? `${process.env.API_URL}/books/download?${stringifiedParams}`
		: `${process.env.API_URL}/books/download`;
};

export const downloadBooks = async (
	params?: DownloadBooksParams,
	options?: RequestInit,
): Promise<downloadBooksResponse> => {
	const res = await fetch(getDownloadBooksUrl(params), {
		...options,
		method: "GET",
	});

	const body = [204, 205, 304].includes(res.status) ? null : await res.text();
	const data: downloadBooksResponse["data"] = body ? JSON.parse(body) : {};

	return { data, status: res.status, headers: res.headers } as downloadBooksResponse;
};
